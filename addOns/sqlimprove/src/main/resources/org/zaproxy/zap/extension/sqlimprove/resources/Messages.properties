# This file defines the default (English) variants of all of the internationalised messages

sqlimprove.desc = SQL Improved Active Scan Rules

sqlimprove.bufferoverflow.name = Buffer Overflow
sqlimprove.bufferoverflow.desc = Buffer overflow errors are characterized by the overwriting of memory spaces of the background web process, which should have never been modified intentionally or unintentionally. Overwriting values of the IP (Instruction Pointer), BP (Base Pointer) and other registers causes exceptions, segmentation faults, and other process errors to occur. Usually these errors end execution of the application in an unexpected way. 
sqlimprove.bufferoverflow.soln = Rewrite the background program using proper return length checking.  This will require a recompile of the background executable.
sqlimprove.bufferoverflow.refs = https://www.owasp.org/index.php/Buffer_overflow_attack
sqlimprove.bufferoverflow.other = Potential Buffer Overflow.  The script closed the connection and threw a 500 Internal Server Error


sqlimprove.commandinjectionplugin.name=Remote OS Command Injection
sqlimprove.commandinjectionplugin.desc=Attack technique used for unauthorized execution of operating system commands. This attack is possible when an application accepts untrusted input to build operating system commands in an insecure manner involving improper data sanitization, and/or improper calling of external programs.
sqlimprove.commandinjectionplugin.refs=http://cwe.mitre.org/data/definitions/78.html\nhttps://www.owasp.org/index.php/Command_Injection

sqlimprove.formatstring.name=Format String Error
sqlimprove.formatstring.desc=A Format String error occurs when the submitted data of an input string is evaluated as a command by the application. 
sqlimprove.formatstring.soln= Rewrite the background program using proper deletion of bad character strings.  This will require a recompile of the background executable.
sqlimprove.formatstring.refs=https://www.owasp.org/index.php/Format_string_attack
sqlimprove.formatstring.error1 = Potential Format String Error.  The script closed the connection on a /%s
sqlimprove.formatstring.error2 = Potential Format String Error.  The script closed the connection on a /%s and /%x
sqlimprove.formatstring.error3 = Potential Format String Error.  The script closed the connection on a microsoft format string error


sqlimprove.testscrosssitescriptv2.name = Cross Site Scripting (Reflected)
sqlimprove.testscrosssitescriptv2.json.name = Cross Site Scripting Weakness (Reflected in JSON Response)
sqlimprove.testscrosssitescriptv2.json.desc = A XSS attack was reflected in a JSON response, this might leave content consumers vulnerable to attack if they don't appropriately handle the data (response).
sqlimprove.testscrosssitescriptv2.otherinfo.nothtml = Raised with LOW confidence as the Content-Type is not HTML

sqlimprove.testpersistentxssattack.name=Cross Site Scripting (Persistent)
sqlimprove.testpersistentxssattack.otherinfo=Source URL: {0}
sqlimprove.testpersistentxssattack.json.name = Cross Site Scripting Weakness (Persistent in JSON Response)
sqlimprove.testpersistentxssattack.json.desc = A XSS attack was found in a JSON response, this might leave content consumers vulnerable to attack if they don't appropriately handle the data (response).
sqlimprove.testpersistentxssattack.otherinfo.nothtml = Raised with LOW confidence as the Content-Type is not HTML 

sqlimprove.testpersistentxssprime.name=Cross Site Scripting (Persistent) - Prime
sqlimprove.testpersistentxssprime.misc=N/A

sqlimprove.testpersistentxssspider.name=Cross Site Scripting (Persistent) - Spider
sqlimprove.testpersistentxssspider.misc=N/A

sqlimprove.testsqlinjection.name=SQL Injection
sqlimprove.testsqlinjection.desc=SQL injection may be possible.
sqlimprove.testsqlinjection.soln=Do not trust client side input, even if there is client side validation in place.  \nIn general, type check all data on the server side.\nIf the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'\nIf the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.\nIf database Stored Procedures can be used, use them.\nDo *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality!\nDo not create dynamic SQL queries using simple string concatenation.\nEscape all data received from the client.\nApply a 'whitelist' of allowed characters, or a 'blacklist' of disallowed characters in user input.\nApply the principle of least privilege by using the least privileged database user possible.\nIn particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.\nGrant the minimum database access that is necessary for the application.
sqlimprove.testsqlinjection.refs=https://www.owasp.org/index.php/Top_10_2010-A1\nhttps://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet
sqlimprove.testsqlinjection.alert.errorbased.attack=[{0}] field: [{1}], value [{2}]
sqlimprove.testsqlinjection.alert.errorbased.differentiation.attack=Original Value: [{0}]. Modified Value: [{1}]. Control Value: [{2}]
sqlimprove.testsqlinjection.alert.booleanbased.attack=[{0}] field: [{1}], value [{2}]
sqlimprove.testsqlinjection.alert.unionbased.attack=[{0}] field: [{1}], value [{2}]
sqlimprove.testsqlinjection.alert.errorbased.extrainfo=RDBMS [{0}] likely, given error message regular expression [{1}] matched by the HTML results.\nThe vulnerability was detected by manipulating the parameter to cause a database error message to be returned and recognised
sqlimprove.testsqlinjection.alert.unionbased.extrainfo=RDBMS [{0}] likely, given UNION-specific error message regular expression [{1}] matched by the HTML results\nThe vulnerability was detected by manipulating the parameter with an SQL 'UNION' clause to cause a database error message to be returned and recognised
sqlimprove.testsqlinjection.alert.expressionbased.extrainfo=The original page results were successfully replicated using the expression [{0}] as the parameter value\nThe parameter value being modified was {1}stripped from the HTML output for the purposes of the comparison
sqlimprove.testsqlinjection.alert.orderbybased.extrainfo=The original page results were successfully replicated using the "ORDER BY" expression [{0}] as the parameter value\nThe parameter value being modified was {1}stripped from the HTML output for the purposes of the comparison
sqlimprove.testsqlinjection.alert.errorbased.httpstatuscode.extrainfo=Unmodified message gave HTTP status [{0}], modified message gave HTTP status [{1}]
sqlimprove.testsqlinjection.alert.errorbased.differentiation.extrainfo=Unmodified message gave HTTP status [{0}], body of length [{1}], modified message gave HTTP status [{2}], body of length [{3}]. A third (non-SQL injection inducing value) gave HTTP status [{4}], body of length [{5}]
sqlimprove.testsqlinjection.alert.booleanbased.extrainfo=The page results were successfully manipulated using the boolean conditions [{0}] and [{1}]\nThe parameter value being modified was {2}stripped from the HTML output for the purposes of the comparison
sqlimprove.testsqlinjection.alert.booleanbased.extrainfo.dataexists=Data was returned for the original parameter.\nThe vulnerability was detected by successfully restricting the data originally returned, by manipulating the parameter
sqlimprove.testsqlinjection.alert.booleanbased.extrainfo.datanotexists=Data was NOT returned for the original parameter.\nThe vulnerability was detected by successfully retrieving more data than originally returned, by manipulating the parameter
sqlimprove.testsqlinjection.alert.timebased.extrainfo=The query time is controllable using parameter value [{0}], which caused the request to take [{1}] milliseconds, when the original unmodified query with value [{2}] took [{3}] milliseconds 
sqlimprove.testsqlinjection.authbypass.name=SQL Injection - Authentication Bypass
sqlimprove.testsqlinjection.authbypass.desc=SQL injection may be possible on a login page, potentially allowing the application's authentication mechanism to be bypassed 

# gdgd009xcd added for improved sqlimprove
sqlimprove.testsqlinjection.nealyequalpercent=950
sqlimprove.testsqlinjection.nealydifferpercent=751
sqlimprove.testsqlinjection.nealydiffermin=70

sqlimprove.testexternalredirect.name=External Redirect
sqlimprove.testexternalredirect.reason.location.header=The response contains a redirect in its Location header which allows an external Url to be set.
sqlimprove.testexternalredirect.reason.location.meta=The response contains a redirect in its meta http-equiv tag for 'Location' which allows an external Url to be set.
sqlimprove.testexternalredirect.reason.refresh.header=The response contains a redirect in its Refresh header which allows an external Url to be set.
sqlimprove.testexternalredirect.reason.refresh.meta=The response contains a redirect in its meta http-equiv tag for 'Refresh' which allows an external Url to be set.
sqlimprove.testexternalredirect.reason.javascript=The response contains a redirect in its JavaScript code which allows an external Url to be set.
sqlimprove.testexternalredirect.reason.notfound=No reason found for it...

sqlimprove.codeinjectionplugin.name=Server Side Code Injection
sqlimprove.codeinjectionplugin.name.asp=Server Side Code Injection - ASP Code Injection
sqlimprove.codeinjectionplugin.name.php=Server Side Code Injection - PHP Code Injection
sqlimprove.codeinjectionplugin.desc=A code injection may be possible including custom code that will be evaluated by the scripting engine
sqlimprove.codeinjectionplugin.soln=Do not trust client side input, even if there is client side validation in place.\nIn general, type check all data on the server side and escape all data received from the client.\n Avoid the use of eval() functions combined with user input data.
sqlimprove.codeinjectionplugin.refs=http://cwe.mitre.org/data/definitions/94.html\nhttps://www.owasp.org/index.php/Direct_Dynamic_Code_Evaluation_('Eval_Injection')

sqlimprove.testdirectorybrowsing.name=Directory Browsing
sqlimprove.testdirectorybrowsing.desc=It is possible to view the directory listing.  Directory listing may reveal hidden scripts, include files , backup source files etc which can be accessed to read sensitive information.
sqlimprove.testdirectorybrowsing.soln=Disable directory browsing.  If this is required, make sure the listed files does not induce risks.
sqlimprove.testdirectorybrowsing.refs=http://httpd.apache.org/docs/mod/core.html#options\nhttp://alamo.satlug.org/pipermail/satlug/2002-February/000053.html\n

sqlimprove.testinjectioncrlf.name=CRLF Injection
sqlimprove.testinjectioncrlf.desc=Cookie can be set via CRLF injection.  It may also be possible to set arbitrary HTTP response headers. In addition, by carefully crafting the injected response using cross-site script, cache poisoning vulnerability may also exist.
sqlimprove.testinjectioncrlf.soln=Type check the submitted parameter carefully.  Do not allow CRLF to be injected by filtering CRLF.
sqlimprove.testinjectioncrlf.refs=http://www.watchfire.com/resources/HTTPResponseSplitting.pdf\nhttp://webappfirewall.com/lib/crlf-injection.txtnull\nhttp://www.securityfocus.com/bid/9804

sqlimprove.testparametertamper.name=Parameter Tampering
sqlimprove.testparametertamper.desc=Parameter manipulation caused an error page or Java stack trace to be displayed.  This indicated lack of exception handling and potential areas for further exploit.
sqlimprove.testparametertamper.soln=Identify the cause of the error and fix it.  Do not trust client side input and enforce a tight check in the server side.  Besides, catch the exception properly.  Use a generic 500 error page for internal server error.

sqlimprove.testpathtraversal.name=Path Traversal

sqlimprove.testremotefileinclude.name=Remote File Inclusion

sqlimprove.testserversideinclude.name=Server Side Include
sqlimprove.testserversideinclude.desc=Certain parameters may cause Server Side Include commands to be executed.  This may allow database connection or arbitrary code to be executed.
sqlimprove.testserversideinclude.soln=Do not trust client side input and enforce a tight check in the server side.  Disable server side includes.\n
Refer to manual to disable Sever Side Include.\n\
Use least privilege to run your web server or application server.\n\
For Apache, disable the following:\n\
Options Indexes FollowSymLinks Includes\n\
AddType application/x-httpd-cgi .cgi\n\
AddType text/x-server-parsed-html .html
sqlimprove.testserversideinclude.refs=http://www.carleton.ca/~dmcfet/html/ssi.html
